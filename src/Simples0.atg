COMPILER Simples0

TS tab = new TS();

public void printTable() {

System.out.println("**** Conte√∫do da tabela de simbolos ****");

System.out.println(tab.toString());

}

/*--------------------------------------------------------------------------*/

CHARACTERS

letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".

digit = "0123456789".

digit_without_zero = "123456789".

cr = '\r'.

lf = '\n'.

tab = '\t'.

TOKENS

varid = letter {letter | digit}.

integer = digit_without_zero {digit}.

string = "'" anyButApostrophe '"' .

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE cr + lf + tab

PRODUCTIONS
/*------------------------------------------------------------------------*/

Simples0 (.String nome;.)= "PROGRAM" clist (.tab.openScope();.) "END" (.tab.closeScope();.).

Clist = Stmt {Stmt}.

Stmt = (Sdecl | Ssprint | Seprint | Satr | Sinput | Atr | Swhile | Scond) ";".

Ssprint(.String x;.) = "PRINT" string (.System.out.println(x);.).

Seprint = "PRINT" Expr.

Sinput = "INPUT" varid.

Satr = varid ":=" string.

Atr = varid ":=" integer.

Sdecl = "VAR" (.int type;.)
( "int" (.type = Constantes.TINTEGER;.) | "string" (.type = Constantes.TSTRING;.))
varid<out name> (.tab.insert(name, Constantes.CVAR, type);.).

Swhile = "WHILE" '(' Lexpr "," Stmt ")".

Scond = "IF" '(' Lexpr "," Stmt ')'.

Expr<out int n> = integer | varid | Sumexpr | Subexpr | Mulexpr | Divexpr | Lessexpr | Gtrexpr | "(" Expr ")".


Sumexpr<out int n> (.int n;.) = Expr<out n1> "+" Expr<out n2> (.n = n1+n2;.).

Subexpr<out int n> (.int n;.) = Expr<out n1> "-" Expr<out n2> (.n=n1-n2;.).

Mulexpr<out int n> (.int n;.) = Expr<out n1> "*" Expr<out n2> (.n=n1*n2;.).

Divexpr<out int n> (.int n;.) = Expr<out n1> "DIV" Expr<out n2> (.n=n1/n2;.).

Relexpr = Lessexpr | Gtrexpr | Eqexpr.

Lessexpr<out int n> (.int n;.) = Expr<out n1> "<" Expr<out n2> (.if(n1<n2){n=1;}else{n=0;}.).

Gtrexpr<out int n> (.int n;.) = Expr<out n1> ">" Expr<out n2> (.if(n1>n2){n=1;}else{n=0;}.).

Eqrexpr<out int n> (.int n;.) = Expr<out n1> "==" Expr<out n2> (.if(n1==n2){n=1;}else{n=0;}.).

Lexpr<out int n> = ".(" Lcond<out n1> (.n=n1;.) ").".

Lcond<out int n> (.int n;.)= "NOT (" Relexpr<out n1> ")" (.if(n1==0){n=1;}else{n=0;}.) | Relexpr<out n2> ("AND" (.if(n2 ==1 && n3 == 1){n=1;}else{n=0;}.)|"OR" (.if(n2 ==1 || n3 == 1){n=1;}else{n=0;}.)) Relexpr<out n3> | "TRUE" (.n=1;.) | "FALSE" (.n=0;.) | Relxexpr<out n4> (.n=n4;.).

END Simples0.